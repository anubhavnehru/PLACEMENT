//RAT AND MAZE PROBLEM USING BACK-TRACKING !THE RAT CAN MOVE IN ANY DIRECTION(LEFT , RIGHT , UP , DOWN)
0 - RAT CAN MOVE
1 - RAT CAN NOT MOVE(BLOCKAGE)
GIVEN INPUT -
0 0 1
1 0 0
1 1 0
OUTPUT
RETUN TRUE OR FALSE IF THE RAT IS ABLE TO COME OUT OF THE MAZE

CONSTRAINT
RAT CAN NOT MOVE DIAGONALLY

#include <stdio.h>

int maze[10][10] , solution[10][10] , num;

int solvemaze(int r, int c)
{
    //if destination is reached, maze is solved
    //destination is the last cell(maze[SIZE-1][SIZE-1])
    if((r == num-1) && (c == num-1))
    {
        solution[r][c] = 1;
        return 1;
    }
    //checking if we can visit in this cell or not
    //the indices of the cell must be in (0,SIZE-1)
    //and solution[r][c] == 0 is making sure that the cell is not already visited
    //maze[r][c] == 0 is making sure that the cell is not blocked
    if(r >= 0 && c >= 0 && r < num && c < num && solution[r][c] == 0 && maze[r][c] == 0)
    {
        //if safe to visit then visit the cell
        solution[r][c] = 1;
        //going down
        if(solvemaze(r+1, c))
            return 1;
        //going right
        if(solvemaze(r, c+1))
            return 1;
        //going up
        if(solvemaze(r-1, c))
            return 1;
        //going left
        if(solvemaze(r, c-1))
            return 1;
        //backtracking
        solution[r][c] = 0;
        return 0;
    }
    return 0;

}

int main()
{
    //making all elements of the solution matrix 0
     int i , j ;
     scanf("%d" , &num);
     for(i = 0 ; i < num ; i++)
     {
          for(j = 0 ; j < num ; j++)
          {
               scanf("%d" ,&maze[i][j]);
          }
     }
     for(i=0; i<num ; i++)
     {
          for(j=0; j<num; j++)
          {
               solution[i][j] = 0;
          }
     }
     if (solvemaze(0 , 0) == 1)
          printf("true\n");
     else
          printf("false\n");
     return 0;
}
